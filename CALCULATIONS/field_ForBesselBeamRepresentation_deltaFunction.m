%%%%% расчёт коэффициента для волн непрерывного спектра в прямом
%%%%% направлении (в сторону среды 2)
%%%%% второе приближение в нахождении коэффициента aplus
function component = field_ForBesselBeamRepresentation_deltaFunction(componentOfField, typeOfCylinder, r, q, q_0, k_0, k, a_0, EE1, GG1, HH1, MU1, EE2, MU2, EE, MU, m, z, AE_0, AH_0)


switch(typeOfCylinder)
    case 'PerfectConductivity'
        p = sqrt(1-q.^2);
        p = real(p) - 1i * abs(imag(p));
        
        q = sqrt(1 - p.^2);
        Q = k_0.* a_0 * q;
        
        H2m  = besselh(m, 2, Q);
        dH2m = (H2m * m)./ Q  - besselh(m + 1, 2, Q);
        H1m  = besselh(m, 1, Q);
        dH1m = (H1m * m)./ Q  - besselh(m + 1, 1, Q);
        
        %%%%%%%% forward wave %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% first type of waves        
        psi1 = -besselh(m,2, k_0 * q * a_0)./ besselh(m,1, k_0 * q * a_0);
        Dm2_forward_1 = 0;
%         Cm2_forward_1 = a_0/(m * p) * 1i * ((dH1m.* psi1 + dH2m)./ (H1m.* psi1 + H2m)) * Dm2_forward_1;
        Cm2_forward_1 = 1;
        N_p_1 = - 8 * (p./ q.^3).* (Cm2_forward_1.^2 + Dm2_forward_1.^2).* psi1;
        a_p_field_1_forw = - 2 * (p./ q.^3).* (Cm2_forward_1.* (psi1 + 1).* AE_0 +...
                                               Dm2_forward_1.* (psi1 - 1).* AH_0) / N_p_1;
        
        %%% second type of waves
        psi2 =  (besselh(m,2, k_0 * q * a_0) * m./ (k_0 * q * a_0) - besselh(m+1,2, k_0 * q * a_0))./...
                (besselh(m,1, k_0 * q * a_0) * m./ (k_0 * q * a_0) - besselh(m+1,1, k_0 * q * a_0));
        Dm2_forward_2 = 1;
        Cm2_forward_2 = 0;
        N_p_2 = - 8 * (p./ q.^3).* (Cm2_forward_2.^2 + Dm2_forward_2.^2).* psi2;
        a_p_field_2_forw = - 2 * (p./ q.^3).* (Cm2_forward_2.* (psi2 + 1).* AE_0 +...
                                               Dm2_forward_2.* (psi2 - 1).* AH_0) / N_p_2;
        

                                           
        Q = k_0.* r * q;
        H2m  = besselh(m, 2, Q);
        dH2m = (H2m * m)./ Q  - besselh(m + 1, 2, Q);
        H1m  = besselh(m, 1, Q);
        dH1m = (H1m * m)./ Q  - besselh(m + 1, 1, Q);
        A0 = 1./ (k_0 * (1 - p.^2));
        switch(componentOfField)
            case 'Ez'
                component = a_p_field_1_forw.* Cm2_forward_1.* (psi1.* H1m + H2m)+...
                            a_p_field_2_forw.* Cm2_forward_2.* (psi2.* H1m + H2m);
%                             a_p_field_1_back.* Cm2_backward_1.* (psi1.* H1m + H2m)+...
%                             a_p_field_2_back.* Cm2_backward_2.* (psi2.* H1m + H2m);
            case 'Hz'
                component = a_p_field_1_forw.* Dm2_forward_1.* (-psi1.* H1m + H2m)+...
                            a_p_field_2_forw.* Dm2_forward_2.* (-psi2.* H1m + H2m);
%                             a_p_field_1_back.* Dm2_backward_1.* (-psi1.* H1m + H2m)+...
%                             a_p_field_2_back.* Dm2_backward_2.* (-psi2.* H1m + H2m);
            case 'Ephi'
                component = A0.* ((-p.* (m./r)).*...
                           (a_p_field_1_forw.* Cm2_forward_1.* (psi1.* H1m + H2m)+...
                            a_p_field_2_forw.* Cm2_forward_2.* (psi2.* H1m + H2m))+...
                                 1i *...
                            (a_p_field_1_forw.* Dm2_forward_1.* k_0.* q.* (-psi1.* dH1m + dH2m)+...
                             a_p_field_2_forw.* Dm2_forward_2.* k_0.* q.* (-psi2.* dH1m + dH2m)));
            case 'Hphi'
                component = A0.* ((-p.* (m./r)).*...
                           (a_p_field_1_forw.* Dm2_forward_1.* (-psi1.* H1m + H2m)+...
                            a_p_field_2_forw.* Dm2_forward_2.* (-psi2.* H1m + H2m))+...
                                 -1i *...
                            (a_p_field_1_forw.* Cm2_forward_1.* k_0.* q.* (psi1.* dH1m + dH2m)+...
                             a_p_field_2_forw.* Cm2_forward_2.* k_0.* q.* (psi2.* dH1m + dH2m)));
            case 'Erho'
                    component = (A0.* ((-(m./r)).*...
                        (a_p_field_1_forw.* Dm2_forward_1.* (-psi1.* H1m + H2m)+...
                         a_p_field_2_forw.* Dm2_forward_2.* (-psi2.* H1m + H2m))+...
                        -1i * p.* ...
                        (a_p_field_1_forw.* Cm2_forward_1.* k_0.* q.* (psi1.* dH1m + dH2m)+...
                         a_p_field_2_forw.* Cm2_forward_2.* k_0.* q.* (psi2.* dH1m + dH2m))));
            case 'Hrho'
                    component = (A0.* (((m./r)).*...
                        (a_p_field_1_forw.* Cm2_forward_1.* (psi1.* H1m + H2m)+...
                         a_p_field_2_forw.* Cm2_forward_2.* (psi2.* H1m + H2m))+...
                        -p.* 1i *...
                        (a_p_field_1_forw.* Dm2_forward_1.* k_0.* q.* (-psi1.* dH1m + dH2m)+...
                         a_p_field_2_forw.* Dm2_forward_2.* k_0.* q.* (-psi2.* dH1m + dH2m))));
        end
        
    case 'Isotropic'
        p = sqrt(1-q.^2);
        p = real(p) - 1i * abs(imag(p));
        
        if(p<=1)
        %%% first type of waves
        psi_forward_1  = psi1_q(k_0, k, a_0, EE1, MU1, EE, MU, m,   p, q);  
        psi_backward_1 = psi1_q(k_0, k, a_0, EE1, MU1, EE, MU, m, (-p), q);
        [B_1_forward_1,B_2_forward_1,Cm2_forward_1,  Dm2_forward_1]  = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1,0,0, MU1, EE, MU, m,   p, q,   psi_forward_1,  1);
        [B_1_backward_1,B_2_backward_1,Cm2_backward_1, Dm2_backward_1] = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1,0,0, MU1, EE, MU, m, (-p), q, psi_backward_1, 1);
        [B_1_back_PandM_1,B_2_back_PandM_1,Cm2_back_PandM_1, Dm2_back_PandM_1] = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1,0,0, MU1, EE, MU, -m, (-p), q, psi_backward_1, 1);

        %%% second type of waves
        psi_forward_2  = psi2_q(k_0, k, a_0, EE1, MU1, EE, MU, m,   p, q);  
        psi_backward_2 = psi2_q(k_0, k, a_0, EE1, MU1, EE, MU, m, (-p), q);
        [B_1_forward_2,B_2_forward_2,Cm2_forward_2,  Dm2_forward_2]  = coefficientsOfContinuousSpectrum_forPsi2(typeOfCylinder,k_0, k, a_0, EE1,0,0, MU1, EE, MU, m,   p, q,   psi_forward_2,  1);
        [B_1_backward_2,B_2_backward_2,Cm2_backward_2, Dm2_backward_2] = coefficientsOfContinuousSpectrum_forPsi2(typeOfCylinder,k_0, k, a_0, EE1,0,0, MU1, EE, MU, m, (-p), q, psi_backward_2, 1);
        [B_1_back_PandM_2,B_2_back_PandM_2,Cm2_back_PandM_2, Dm2_back_PandM_2] = coefficientsOfContinuousSpectrum_forPsi2(typeOfCylinder,k_0, k, a_0, EE1,0,0, MU1, EE, MU, -m, (-p), q, psi_backward_2, 1);

        
% %         %%%%% forward waves first type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
% %         N_p_1 = - 8 * (p./ q).* (Cm2_forward_1.^2 + Dm2_forward_1.^2).* psi_forward_1;
% %         a_p_field_1_forw = - 2 * (p./ q.^2).* (Cm2_back_PandM_1.* (psi_forward_1 + 1).* AE_0 +...
% %                                                Dm2_back_PandM_1.* (psi_forward_1 - 1).* AH_0) / N_p_1;
% %                                            
% %         %%%%% forward waves second type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%
% %         N_p_2 = - 8 * (p./ q).* (Cm2_forward_2.^2 + Dm2_forward_2.^2).* psi_forward_2;
% %         a_p_field_2_forw = - 2 * (p./ q.^2).* (Cm2_back_PandM_2.* (psi_forward_2 + 1).* AE_0 +...
% %                                                Dm2_back_PandM_2.* (psi_forward_2 - 1).* AH_0) / N_p_2;
%                                            
        %%%%% forward waves first type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
        N_p_1 = - (16 * pi / k_0^2) * (p./ q).* (Cm2_forward_1.^2 + Dm2_forward_1.^2).* psi_forward_1;
        a_p_field_1_forw = - (8 * pi^2 / k_0^3) * (p./ q.^2).*...
                             (Cm2_back_PandM_1.* (psi_forward_1 + 1).* AE_0 +...
                              Dm2_back_PandM_1.* (psi_forward_1 - 1).* AH_0)./ N_p_1;
                                           
        %%%%% forward waves second type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%
        N_p_2 = - (16 * pi / k_0^2) * (p./ q).* (Cm2_forward_2.^2 + Dm2_forward_2.^2).* psi_forward_2;
        a_p_field_2_forw = - (8 * pi^2 / k_0^3) * (p./ q.^2).*...
                             (Cm2_back_PandM_2.* (psi_forward_2 + 1).* AE_0 +...
                              Dm2_back_PandM_2.* (psi_forward_2 - 1).* AH_0)./ N_p_2;
                          
%     [a_p_field_1_forw, a_p_field_2_forw, psi_delta_1, psi_delta_2,...
%       B_1_delta_1,B_2_delta_1,Cm2_delta_1,  Dm2_delta_1,...
%       B_1_delta_2,B_2_delta_2,Cm2_delta_2,  Dm2_delta_2] = coefficientsOf_deltaFunctionWave(typeOfCylinder, q, p, k_0,k_0, a_0, EE1, GG1, HH1, MU1, EE, MU, m, AE_0, AH_0);
        else           
      %%% discret mode
          %%% first type of waves
          psi_forward_1  = 0;
          [B_1_forward_1,B_2_forward_1,Cm2_forward_1,  Dm2_forward_1]  = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, GG1, HH1, MU1, EE, MU, m,   p, q,   psi_forward_1,  1);
    
          %%% second type of waves
          psi_forward_2  = 0;
          [B_1_forward_2,B_2_forward_2,Cm2_forward_2,  Dm2_forward_2]  = coefficientsOfContinuousSpectrum_forPsi2(typeOfCylinder,k_0, k, a_0, EE1, GG1, HH1, MU1, EE, MU, m,   p, q,   psi_forward_2,  1);
    
         %%%%% forward waves first type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
         a_p_field_1_forw = 1;
    
         %%%%% forward waves second type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%
         a_p_field_2_forw = 0;            
        end
                                           
            Q = k_0.* r * q;
            H2m  = besselh(m, 2, Q);
            dH2m = (H2m * m)./ Q  - besselh(m + 1, 2, Q);
            H1m  = besselh(m, 1, Q);
            dH1m = (H1m * m)./ Q  - besselh(m + 1, 1, Q);
            A0 = 1./ (k_0 * (1 - p.^2));
            A1 = 1./ (k_0 * (EE1 - p.^2));
            q1 = sqrt(EE1*MU1 - p.^2);
            Jm  = besselj(m, k_0 * q1 * r);
            dJm = (Jm * m)./ (k_0 * q1 * r)  - besselj(m + 1, k_0 * q1 * r);
            switch(componentOfField)
                case 'Ez'
                    component = q.* (a_p_field_1_forw.* Cm2_forward_1.* (psi_forward_1.* H1m + H2m)+...
                                     a_p_field_2_forw.* Cm2_forward_2.* (psi_forward_2.* H1m + H2m)).*(r>=a_0)+...
                                q1.* (a_p_field_1_forw.* B_1_forward_1.*  EE1 * Jm +...
                                      a_p_field_2_forw.* B_1_forward_2.*  EE1 * Jm).* (r<a_0);
                case 'Hz'
                    component = q.* (a_p_field_1_forw.* Dm2_forward_1.* (-psi_forward_1.* H1m + H2m)+...
                                     a_p_field_2_forw.* Dm2_forward_2.* (-psi_forward_2.* H1m + H2m)).* (r>=a_0)+...;
                                q1.* (a_p_field_1_forw.* B_2_forward_1.*  Jm +...
                                     a_p_field_2_forw.* B_2_forward_2.*  Jm).* (r<a_0);
                case 'Ephi'
                    component = q.* (A0.* ((-p.* (m./r)).*...
                        (a_p_field_1_forw.* Cm2_forward_1.* (psi_forward_1.* H1m + H2m)+...
                         a_p_field_2_forw.* Cm2_forward_2.* (psi_forward_2.* H1m + H2m))+...
                        1i *...
                        (a_p_field_1_forw.* Dm2_forward_1.* k_0.* q.* (-psi_forward_1.* dH1m + dH2m)+...
                         a_p_field_2_forw.* Dm2_forward_2.* k_0.* q.* (-psi_forward_2.* dH1m + dH2m)))).* (r>=a_0)+...
                        q1.* (A1.* ((-p.* (m./r)).*...
                        (a_p_field_1_forw.* B_1_forward_1.* Jm+...
                         a_p_field_2_forw.* B_1_forward_2.* Jm)+...
                        1i *...
                        (a_p_field_1_forw.* B_2_forward_1.* k_0.* q1.* dJm+...
                         a_p_field_2_forw.* B_2_forward_2.* k_0.* q1.* dJm))).* (r<a_0);
                case 'Erho'
                    component = q.* (A0.* ((-(m./r)).*...
                        (a_p_field_1_forw.* Dm2_forward_1.* (-psi_forward_1.* H1m + H2m)+...
                         a_p_field_2_forw.* Dm2_forward_2.* (-psi_forward_2.* H1m + H2m))+...
                        -1i * p.* ...
                        (a_p_field_1_forw.* Cm2_forward_1.* k_0.* q.* (psi_forward_1.* dH1m + dH2m)+...
                         a_p_field_2_forw.* Cm2_forward_2.* k_0.* q.* (psi_forward_2.* dH1m + dH2m)))).* (r>=a_0)+...
                        q1.* (A1.* ((-(m./r)).*...
                        (a_p_field_1_forw.* B_2_forward_1.* Jm+...
                         a_p_field_2_forw.* B_2_forward_2.* Jm)+...
                        -1i * p.* ...
                        (a_p_field_1_forw.* B_1_forward_1.* k_0.* q1.* dJm+...
                         a_p_field_2_forw.* B_1_forward_2.* k_0.* q1.* dJm))).* (r<a_0);
                case 'Hphi'
                    component = q.* (A0.* ((-p.* (m./r)).*...
                        (a_p_field_1_forw.* Dm2_forward_1.* (-psi_forward_1.* H1m + H2m)+...
                         a_p_field_2_forw.* Dm2_forward_2.* (-psi_forward_2.* H1m + H2m))+...
                        -1i *...
                        (a_p_field_1_forw.* Cm2_forward_1.* k_0.* q.* (psi_forward_1.* dH1m + dH2m)+...
                         a_p_field_2_forw.* Cm2_forward_2.* k_0.* q.* (psi_forward_2.* dH1m + dH2m)))).* (r>=a_0)+...
                        q1.* (A1.* ((-p.* (m./r)).*...
                        (a_p_field_1_forw.* B_2_forward_1.* Jm+...
                         a_p_field_2_forw.* B_2_forward_2.* Jm)+...
                        -1i * EE1.* ...
                        (a_p_field_1_forw.* B_1_forward_1.* k_0.* q1.* dJm+...
                         a_p_field_2_forw.* B_1_forward_2.* k_0.* q1.* dJm))).* (r<a_0);
                case 'Hrho'
                    component = q.* (A0.* (((m./r)).*...
                        (a_p_field_1_forw.* Cm2_forward_1.* (psi_forward_1.* H1m + H2m)+...
                         a_p_field_2_forw.* Cm2_forward_2.* (psi_forward_2.* H1m + H2m))+...
                        -p.* 1i *...
                        (a_p_field_1_forw.* Dm2_forward_1.* k_0.* q.* (-psi_forward_1.* dH1m + dH2m)+...
                         a_p_field_2_forw.* Dm2_forward_2.* k_0.* q.* (-psi_forward_2.* dH1m + dH2m)))).* (r>=a_0)+...
                        q1.* (A1.* (((EE1 * m./r)).*...
                        (a_p_field_1_forw.* B_1_forward_1.* Jm+...
                         a_p_field_2_forw.* B_1_forward_2.* Jm)+...
                        -p.* 1i *...
                        (a_p_field_1_forw.* B_2_forward_1.* k_0.* q1.* dJm+...
                         a_p_field_2_forw.* B_2_forward_2.* k_0.* q1.* dJm))).* (r<a_0);
            end
            
    case 'Gyrotropic'
        p = sqrt(1-q.^2);
%         p = real(p) - 1i * abs(imag(p));
        p = p.* (2*(imag(p) <= 0)-1);
        
        if(p<=1)
        %%% first type of waves
        %%% first type of waves
        psi_forward_1  = psi1_q__gyrotropic(k_0, k, a_0, EE1, GG1, HH1, m,   p, q);  
%         psi_backward_1 = psi1_q__gyrotropic(k_0, k, a_0, EE1, -GG1, HH1, -m, (-p), q);  
        psi_backward_1 = psi_forward_1;
        [B_1_forward_1,B_2_forward_1,Cm2_forward_1,  Dm2_forward_1]  = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, GG1, HH1, MU1, EE, MU, m,   p, q,   psi_forward_1,  1);
        [B_1_backward_1,B_2_backward_1,Cm2_backward_1, Dm2_backward_1] = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, GG1, HH1, MU1, EE, MU, m, (-p), q, psi_backward_1, 1);
        [B_1_back_PandM_1,B_2_back_PandM_1,Cm2_back_PandM_1, Dm2_back_PandM_1] = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, -GG1, HH1, MU1, EE, MU, -m, (-p), q, psi_backward_1, 1);

        %%% second type of waves
        psi_forward_2  = psi2_q__gyrotropic(k_0, k, a_0, EE1, GG1, HH1, m,   p, q);  
%         psi_backward_2 = psi2_q__gyrotropic(k_0, k, a_0, EE1, -GG1, HH1, -m, (-p), q); 
        psi_backward_2 = psi_forward_2;
        [B_1_forward_2,B_2_forward_2,Cm2_forward_2,  Dm2_forward_2]  = coefficientsOfContinuousSpectrum_forPsi2(typeOfCylinder,k_0, k, a_0, EE1, GG1, HH1, MU1, EE, MU, m,   p, q,   psi_forward_2,  1);
        [B_1_backward_2,B_2_backward_2,Cm2_backward_2, Dm2_backward_2] = coefficientsOfContinuousSpectrum_forPsi2(typeOfCylinder,k_0, k, a_0, EE1, GG1, HH1, MU1, EE, MU, m, (-p), q, psi_backward_2, 1);
        [B_1_back_PandM_2,B_2_back_PandM_2,Cm2_back_PandM_2, Dm2_back_PandM_2] = coefficientsOfContinuousSpectrum_forPsi2(typeOfCylinder,k_0, k, a_0, EE1, -GG1, HH1, MU1, EE, MU, -m, (-p), q, psi_backward_2, 1);

        
%         %%%%% forward waves first type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
%         N_p_1 = - 8 * (p./ q).* (Cm2_forward_1.^2 + Dm2_forward_1.^2).* psi_forward_1;
%         a_p_field_1_forw = - 2 * (p./ q^2).* (Cm2_back_PandM_1.* (psi_forward_1 + 1).* AE_0 +...
%                                               Dm2_back_PandM_1.* (psi_forward_1 - 1).* AH_0) / N_p_1;
%                                            
%         %%%%% forward waves second type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%
%         N_p_2 = - 8 * (p./ q).* (Cm2_forward_2.^2 + Dm2_forward_2.^2).* psi_forward_2;
%         a_p_field_2_forw = - 2 * (p./ q^2).* (Cm2_back_PandM_2.* (psi_forward_2 + 1).* AE_0 +...
%                                               Dm2_back_PandM_2.* (psi_forward_2 - 1).* AH_0) / N_p_2;
%                                           
        %%%%% forward waves first type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
        N_p_1 = - (16 * pi / k_0^2) * (p./ q).* (Cm2_forward_1.^2 + Dm2_forward_1.^2).* psi_forward_1;
        a_p_field_1_forw = - (8 * pi^2 / k_0^3) * (p./ q.^2).*...
                             (Cm2_back_PandM_1.* (psi_forward_1 + 1).* AE_0 +...
                              Dm2_back_PandM_1.* (psi_forward_1 - 1).* AH_0)./ N_p_1;
                                           
        %%%%% forward waves second type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%
        N_p_2 = - (16 * pi / k_0^2) * (p./ q).* (Cm2_forward_2.^2 + Dm2_forward_2.^2).* psi_forward_2;
        a_p_field_2_forw = - (8 * pi^2 / k_0^3) * (p./ q.^2).*...
                             (Cm2_back_PandM_2.* (psi_forward_2 + 1).* AE_0 +...
                              Dm2_back_PandM_2.* (psi_forward_2 - 1).* AH_0)./ N_p_2;
        else           
          %%% discret mode
          %%% first type of waves
          psi_forward_1  = 0;
          [B_1_forward_1,B_2_forward_1,Cm2_forward_1,  Dm2_forward_1]  = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, GG1, HH1, MU1, EE, MU, m,   p, q,   psi_forward_1,  1);
    
          %%% second type of waves
          psi_forward_2  = 0;
          [B_1_forward_2,B_2_forward_2,Cm2_forward_2,  Dm2_forward_2]  = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, GG1, HH1, MU1, EE, MU, m,   p, q,   psi_forward_2,  1);
    
          %%%%% forward waves first type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
          a_p_field_1_forw = 1;
    
          %%%%% forward waves second type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%
          a_p_field_2_forw = 0;            
        end
                          
                          
                          
                          

            Q = k_0.* r * q;
            H2m  = besselh(m, 2, Q);
            dH2m = (H2m * m)./ Q  - besselh(m + 1, 2, Q);
            H1m  = besselh(m, 1, Q);
            dH1m = (H1m * m)./ Q  - besselh(m + 1, 1, Q);
            A0 = 1./ (k_0 * (1 - p.^2));
            
            [q1, q2, n1, n2, alp1, alp2, bet1, bet2] = term_of_gyrotropic_waveguide(EE1, GG1, HH1, p);
            
            Q1 = (q1.* r).* k_0;
            Q2 = (q2.* r).* k_0;  
            
            JM1    = besselj(m+1, Q1);
            JM2    = besselj(m+1, Q2);
            Jm1    = besselj(m, Q1);
            Jm2    = besselj(m, Q2);
            Jm1_Q1 = Jm1./ Q1;
            Jm2_Q2 = Jm2./ Q2;
            
%             Ez1    = (((1i./HH1).* n1).* q1).* Jm1;
%             Ez2    = (((1i./HH1).* n2).* q2).* Jm2;
%             Ephi1  = 1i * (JM1 + (alp1.* m).* Jm1_Q1);
%             Ephi2  = 1i * (JM2 + (alp2.* m).* Jm2_Q2);
%             Hz1    = - q1.* Jm1;
%             Hz2    = - q2.* Jm2;
%             Hphi1  = - n1.* (JM1 - (bet1 * m).* Jm1_Q1);
%             Hphi2  = - n2.* (JM2 - (bet2 * m).* Jm2_Q2);
            
            
            switch(componentOfField)
                case 'Ez'
                    component = (a_p_field_1_forw.* Cm2_forward_1.* q.* (psi_forward_1.* H1m + H2m)+...
                                 a_p_field_2_forw.* Cm2_forward_2.* q.* (psi_forward_2.* H1m + H2m)).*(r>=a_0)+...
                          HH1 * (a_p_field_1_forw.* (B_1_forward_1.*  (((1i./HH1).* n1).* q1).* Jm1 +...
                                                     B_2_forward_1.*  (((1i./HH1).* n2).* q2).* Jm2)+...
                                 a_p_field_2_forw.* (B_1_forward_2.*  (((1i./HH1).* n1).* q1).* Jm1 +...
                                                     B_2_forward_2.*  (((1i./HH1).* n2).* q2).* Jm2)).* (r<a_0);
                case 'Hz'
                    component = (a_p_field_1_forw.* Dm2_forward_1.* q.* (-psi_forward_1.* H1m + H2m)+...
                                 a_p_field_2_forw.* Dm2_forward_2.* q.* (-psi_forward_2.* H1m + H2m)).* (r>=a_0)+...
                                (a_p_field_1_forw.* (B_1_forward_1.*  (- q1.* Jm1) +...
                                                     B_2_forward_1.*  (- q2.* Jm2))+...
                                 a_p_field_2_forw.* (B_1_forward_2.*  (- q1.* Jm1) +...
                                                     B_2_forward_2.*  (- q2.* Jm2))).* (r<a_0);
                case 'Ephi'
                    component = (A0.* ((-p.* (m./r)).*...
                        (a_p_field_1_forw.* Cm2_forward_1.* q.* (psi_forward_1.* H1m + H2m)+...
                         a_p_field_2_forw.* Cm2_forward_2.* q.* (psi_forward_2.* H1m + H2m))+...
                        1i *...
                        (a_p_field_1_forw.* Dm2_forward_1.* q.* k_0.* q.* (-psi_forward_1.* dH1m + dH2m)+...
                         a_p_field_2_forw.* Dm2_forward_2.* q.* k_0.* q.* (-psi_forward_2.* dH1m + dH2m)))).* (r>=a_0)+...
                        (a_p_field_1_forw.* (B_1_forward_1.* 1i * (JM1 + (alp1.* m).* Jm1_Q1)+...
                                             B_2_forward_1.* 1i * (JM2 + (alp2.* m).* Jm2_Q2))+...
                         a_p_field_2_forw.* (B_1_forward_2.* 1i * (JM1 + (alp1.* m).* Jm1_Q1)+...
                                             B_2_forward_2.* 1i * (JM2 + (alp2.* m).* Jm2_Q2))).* (r<a_0);
                case 'Erho'
                    component = (A0.* q.* ((-(m./r)).*...
                        (a_p_field_1_forw.* Dm2_forward_1.* (-psi_forward_1.* H1m + H2m)+...
                         a_p_field_2_forw.* Dm2_forward_2.* (-psi_forward_2.* H1m + H2m))+...
                        -1i * p.* ...
                        (a_p_field_1_forw.* Cm2_forward_1.* k_0.* q.* (psi_forward_1.* dH1m + dH2m)+...
                         a_p_field_2_forw.* Cm2_forward_2.* k_0.* q.* (psi_forward_2.* dH1m + dH2m)))).* (r>=a_0)+...
                        (a_p_field_1_forw.* (-B_1_forward_1.* ((n1.*p + GG1)./EE1.* JM1 + (alp1.* m).* Jm1_Q1)+...
                                             -B_2_forward_1.* ((n2.*p + GG1)./EE1.* JM2 + (alp2.* m).* Jm2_Q2))+...
                         a_p_field_2_forw.* (-B_1_forward_2.* ((n1.*p + GG1)./EE1.* JM1 + (alp1.* m).* Jm1_Q1)+...
                                             -B_2_forward_2.* ((n2.*p + GG1)./EE1.* JM2 + (alp2.* m).* Jm2_Q2))).* (r<a_0);
                case 'Hphi'
                    component = (A0.* q.* ((-p.* (m./r)).*...
                        (a_p_field_1_forw.* Dm2_forward_1.* (-psi_forward_1.* H1m + H2m)+...
                         a_p_field_2_forw.* Dm2_forward_2.* (-psi_forward_2.* H1m + H2m))+...
                        -1i *...
                        (a_p_field_1_forw.* Cm2_forward_1.* k_0.* q.* (psi_forward_1.* dH1m + dH2m)+...
                         a_p_field_2_forw.* Cm2_forward_2.* k_0.* q.* (psi_forward_2.* dH1m + dH2m)))).* (r>=a_0)+...
                        (a_p_field_1_forw.* (-B_1_forward_1.* n1.* (JM1 - (bet1.* m).* Jm1_Q1)+...
                                             -B_2_forward_1.* n2.* (JM2 - (bet2.* m).* Jm2_Q2))+...
                         a_p_field_2_forw.* (-B_1_forward_2.* n1.* (JM1 - (bet1.* m).* Jm1_Q1)+...
                                             -B_2_forward_2.* n2.* (JM2 - (bet2.* m).* Jm2_Q2))).* (r<a_0);
                case 'Hrho'
                    component = (A0.* q.* (((m./r)).*...
                        (a_p_field_1_forw.* Cm2_forward_1.* (psi_forward_1.* H1m + H2m)+...
                         a_p_field_2_forw.* Cm2_forward_2.* (psi_forward_2.* H1m + H2m))+...
                        -p.* 1i *...
                        (a_p_field_1_forw.* Dm2_forward_1.* k_0.* q.* (-psi_forward_1.* dH1m + dH2m)+...
                         a_p_field_2_forw.* Dm2_forward_2.* k_0.* q.* (-psi_forward_2.* dH1m + dH2m)))).* (r>=a_0)+...
                   -1i *(a_p_field_1_forw.* (B_1_forward_1.* (p.* JM1 - (n1.* bet1.* m).* Jm1_Q1)+...
                                             B_2_forward_1.* (p.* JM2 - (n2.* bet2.* m).* Jm2_Q2))+...
                         a_p_field_2_forw.* (B_1_forward_2.* (p.* JM1 - (n1.* bet1.* m).* Jm1_Q1)+...
                                             B_2_forward_2.* (p.* JM2 - (n2.* bet2.* m).* Jm2_Q2))).* (r<a_0);
            end
end

% if(p<=1)
    component = k_0/2/pi * component.* exp(-1i * k_0 * p * z);
% else
%     component = component.* exp(-1i * k_0 * p * z);
% end







