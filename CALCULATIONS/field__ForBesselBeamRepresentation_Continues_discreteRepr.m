%%%%% расчёт коэффициента для волн непрерывного спектра в прямом
%%%%% направлении (в сторону среды 2)
%%%%% второе приближение в нахождении коэффициента aplus
function component = field__ForBesselBeamRepresentation_Continues_discreteRepr(componentOfField, typeOfCylinder,r, q, q_0, k_0, k, a_0, EE1, GG1, HH1, MU1, EE2, MU2, EE, MU, m, z, AE_0, AH_0,...
          a_p_field_1_forw, a_p_field_1_back, a_p_field_2_forw, a_p_field_2_back,...
          psi_forward_1, psi_backward_1, psi_forward_1_transp, psi_backward_1_transp,...
          psi_forward_2, psi_backward_2, psi_forward_2_transp, psi_backward_2_transp,...
          B_1_forward_1,B_2_forward_1,Cm2_forward_1,  Dm2_forward_1,...
          B_1_backward_1,B_2_backward_1,Cm2_backward_1, Dm2_backward_1,...
          B_1_forward_2,B_2_forward_2,Cm2_forward_2,  Dm2_forward_2,...
          B_1_backward_2,B_2_backward_2,Cm2_backward_2, Dm2_backward_2)

 p = sqrt(1-q.^2);
 p = p.* (2*(imag(p) <= 0)-1);

  p_0 = sqrt(1-q_0.^2);
  
  m0 = m;
  
  a_p_field_1_forw = a_p_field_1_forw.* (exp(-1i * k_0 * p * z));
  a_p_field_2_forw = a_p_field_2_forw.* (exp(-1i * k_0 * p * z));
  a_p_field_1_back = a_p_field_1_back.* (exp( 1i * k_0 * p * z));
  a_p_field_2_back = a_p_field_2_back.* (exp( 1i * k_0 * p * z));
  
a_p_field_1_forw(isnan(a_p_field_1_forw)) = isnan(a_p_field_1_forw(isnan(a_p_field_1_forw))) * 0;
a_p_field_2_forw(isnan(a_p_field_2_forw)) = isnan(a_p_field_2_forw(isnan(a_p_field_2_forw))) * 0;
a_p_field_1_back(isnan(a_p_field_1_back)) = isnan(a_p_field_1_back(isnan(a_p_field_1_back))) * 0;
a_p_field_2_back(isnan(a_p_field_2_back)) = isnan(a_p_field_2_back(isnan(a_p_field_2_back))) * 0;
  
switch(typeOfCylinder)
    case 'PerfectConductivity'
        
%         m = -m;
%         p = -p;
%         
%         Q = k_0.* a_0 * q;
%         H2m  = besselh(m, 2, Q);
%         dH2m = (H2m * m)./ Q  - besselh(m + 1, 2, Q);
%         H1m  = besselh(m, 1, Q);
%         dH1m = (H1m * m)./ Q  - besselh(m + 1, 1, Q);
%         
%         %%%%%%%% forward wave %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         %%%%%%%%%%%%%%%%%%% first type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%        
%         psi1 = -besselh(m,2, k_0 * q * a_0)./ besselh(m,1, k_0 * q * a_0);
%         Dm2_forward_1 = 0;
%         Cm2_forward_1 = 1;
%         N_p_1 = (-1)^m * 8 * (p./ q.^3 / k_0).* (Cm2_forward_1.^2 + Dm2_forward_1.^2).* psi1;
%         
%         A = 1./ (k_0 * (q.^2));  
%         Ez_q  = Cm2_forward_1.* (psi1.* H1m + H2m);
%         Hz_q  = Dm2_forward_1.* (-psi1.* H1m + H2m);
%         dEz_q = Cm2_forward_1.* (psi1.* dH1m + dH2m);
%         dHz_q = Dm2_forward_1.* (-psi1.* dH1m + dH2m);
%         Ephi_q  = A.* ((-p.* (m./a_0)).* Ez_q + 1i * k_0 * q.* dHz_q);
%         Hphi_q  = A.* ((-p.* (m./a_0)).* Hz_q - 1i * k_0 * q.* dEz_q);
%     
%         Ez_q_0   = AE_0.* besselj(m0,  k_0.* a_0* q_0);
%         Hz_q_0   = AH_0.* besselj(m0,  k_0.* a_0* q_0);
%         dEz_q_0  = AE_0.* k_0.* (q_0) *((besselj(m0, k_0.* a_0* q_0) * (m0))./ (k_0.* a_0* q_0)  - besselj(m0 + 1,   k_0.* a_0* q_0));
%         dHz_q_0  = AH_0.* k_0.* (q_0) *((besselj(m0, k_0.* a_0* q_0) * (m0))./ (k_0.* a_0* q_0)  - besselj(m0 + 1,   k_0.* a_0* q_0));
%         A0 = 1./ (k_0 * (1 - p_0.^2));
%         Ephi_q_plus0  = A0.* (-p_0.* (m0./a_0).* Ez_q_0 + 1i * dHz_q_0);
%         Hphi_q_plus0  = A0.* (-p_0.* (m0./a_0).* Hz_q_0 - 1i * dEz_q_0);
% %         Hrho_q_plus0  = @(r)  A0.* (((m0./a_0)).* Ez_q_0 - 1i * p_0 * dHz_q_0);
% %         Erho_q_plus0  = @(r)  A0.* (-1i * p_0 * dEz_q_0 - (m0./a_0).* Hz_q_0);    
%     
%         %%%%%%%%%%%%% exitation coefficient of forward waves %%%%%%%%%%%%%%
%         S_plus = (-Ez_q.* Hphi_q_plus0 + Ephi_q.* Hz_q_0 +...
%                  Ez_q_0.* Hphi_q - Ephi_q_plus0.* Hz_q).* (a_0 * exp(-1i*(p+p_0)*k_0*z)./(1i*k_0*(p + p_0)));
%         a_p_field_1_forw = S_plus./ N_p_1;
%   
% % % %%%% test        
% % q = [0.01:0.01:5];
% %   p = sqrt(1-q.^2);
% %   p = real(p) - 1i * abs(imag(p));
% %   psi_forward_1  = psi1_q(k_0, k, a_0, EE1, MU1, EE, MU, m,   p); 
% % figure(5)
% % plot(q, real(a_p_field_1_forw),'bo-', q, imag(a_p_field_1_forw),'ro-')
%         
%         
%         
%         %%%%%%%%%%%%% exitation coefficient of backward waves %%%%%%%%%%%%%%
%         Ephi_q  = A.* (( p.* (m./a_0)).* Ez_q + 1i * k_0 * q.* dHz_q);
%         Hphi_q  = A.* (( p.* (m./a_0)).* Hz_q - 1i * k_0 * q.* dEz_q);
%         S_plus = (-Ez_q.* Hphi_q_plus0 + Ephi_q.* Hz_q_0 +...
%                  Ez_q_0.* Hphi_q - Ephi_q_plus0.* Hz_q).* (a_0 * exp(-1i*(-p+p_0)*k_0*z)./(1i*k_0*(-p + p_0)));
%         a_p_field_1_back = -S_plus./ N_p_1;
%         
%         
%         
%         %%%%%%%%%%%%%%%%%% second type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
%         psi2 =  (besselh(m,2, k_0 * q * a_0) * m./ (k_0 * q * a_0) - besselh(m+1,2, k_0 * q * a_0))./...
%                 (besselh(m,1, k_0 * q * a_0) * m./ (k_0 * q * a_0) - besselh(m+1,1, k_0 * q * a_0));
%         Dm2_forward_2 = 1;
%         Cm2_forward_2 = 0;
%         N_p_2 = (-1)^m * 8 * (p./ q.^3 / k_0).* (Cm2_forward_2.^2 + Dm2_forward_2.^2).* psi2;
%         
%         A = 1./ (k_0 * (q.^2));  
%         Ez_q  = Cm2_forward_2.* (psi2.* H1m + H2m);
%         Hz_q  = Dm2_forward_2.* (-psi2.* H1m + H2m);
%         dEz_q = Cm2_forward_2.* (psi2.* dH1m + dH2m);
%         dHz_q = Dm2_forward_2.* (-psi2.* dH1m + dH2m);
%         Ephi_q  = A.* ((-p.* (m./a_0)).* Ez_q + 1i * k_0 * q.* dHz_q);
%         Hphi_q  = A.* ((-p.* (m./a_0)).* Hz_q - 1i * k_0 * q.* dEz_q);
%         
%         %%%%%%%%%%%%% exitation coefficient of forward waves %%%%%%%%%%%%%%
%         S_plus = (-Ez_q.* Hphi_q_plus0 + Ephi_q.* Hz_q_0 +...
%                  Ez_q_0.* Hphi_q - Ephi_q_plus0.* Hz_q).* (a_0 * exp(-1i*(p+p_0)*k_0*z)./(1i*k_0*(p + p_0)));
%         a_p_field_2_forw = S_plus./ N_p_2;
%         
%         %%%%%%%%%%%%% exitation coefficient of backward waves %%%%%%%%%%%%%%
%         Ephi_q  = A.* (( p.* (m./a_0)).* Ez_q + 1i * k_0 * q.* dHz_q);
%         Hphi_q  = A.* (( p.* (m./a_0)).* Hz_q - 1i * k_0 * q.* dEz_q);
%         S_plus = (-Ez_q.* Hphi_q_plus0 + Ephi_q.* Hz_q_0 +...
%                  Ez_q_0.* Hphi_q - Ephi_q_plus0.* Hz_q).* (a_0 * exp(-1i*(-p+p_0)*k_0*z)./(1i*k_0*(-p + p_0)));
%         a_p_field_2_back = -S_plus./ N_p_2;
        
        
        Q = k_0.* r * q;
        H2m  = besselh(m0, 2, Q);
        dH2m = (H2m * m0)./ Q  - besselh(m0 + 1, 2, Q);
        H1m  = besselh(m0, 1, Q);
        dH1m = (H1m * m0)./ Q  - besselh(m0 + 1, 1, Q);
        A0 = 1./ (k_0 * (q.^2));
%         p = -p;
%         m = -m;

psi1 = psi_forward_1;
psi2 = psi_forward_2;
        switch(componentOfField)
            case 'Ez'
                component = a_p_field_1_forw.* Cm2_forward_1.* (psi1.* H1m + H2m)+...
                            a_p_field_2_forw.* Cm2_forward_2.* (psi2.* H1m + H2m)+...
                            a_p_field_1_back.* Cm2_forward_1.* (psi1.* H1m + H2m)+...
                            a_p_field_2_back.* Cm2_forward_2.* (psi2.* H1m + H2m);
            case 'Hz'
                component = a_p_field_1_forw.* Dm2_forward_1.* (-psi1.* H1m + H2m)+...
                            a_p_field_2_forw.* Dm2_forward_2.* (-psi2.* H1m + H2m)+...
                            a_p_field_1_back.* Dm2_forward_1.* (-psi1.* H1m + H2m)+...
                            a_p_field_2_back.* Dm2_forward_2.* (-psi2.* H1m + H2m);
            case 'Ephi'
                component = A0.* ((-p.* (m./r)).*...
                           (a_p_field_1_forw.* Cm2_forward_1.* (psi1.* H1m + H2m)+...
                            a_p_field_2_forw.* Cm2_forward_2.* (psi2.* H1m + H2m)-...
                           (a_p_field_1_back.* Cm2_forward_1.* (psi1.* H1m + H2m)+...
                            a_p_field_2_back.* Cm2_forward_2.* (psi2.* H1m + H2m)))+...
                                 1i *...
                            (a_p_field_1_forw.* Dm2_forward_1.* k_0.* q.* (-psi1.* dH1m + dH2m)+...
                             a_p_field_2_forw.* Dm2_forward_2.* k_0.* q.* (-psi2.* dH1m + dH2m)+...
                             a_p_field_1_back.* Dm2_forward_1.* k_0.* q.* (-psi1.* dH1m + dH2m)+...
                             a_p_field_2_back.* Dm2_forward_2.* k_0.* q.* (-psi2.* dH1m + dH2m)));
            case 'Hphi'
                component = A0.* ((-p.* (m./r)).*...
                           (a_p_field_1_forw.* Dm2_forward_1.* (-psi1.* H1m + H2m)+...
                            a_p_field_2_forw.* Dm2_forward_2.* (-psi2.* H1m + H2m)-...
                           (a_p_field_1_back.* Dm2_forward_1.* (-psi1.* H1m + H2m)+...
                            a_p_field_2_back.* Dm2_forward_2.* (-psi2.* H1m + H2m)))+...
                                -1i *...
                            (a_p_field_1_forw.* Cm2_forward_1.* k_0.* q.* (psi1.* dH1m + dH2m)+...
                             a_p_field_2_forw.* Cm2_forward_2.* k_0.* q.* (psi2.* dH1m + dH2m)+...
                             a_p_field_1_back.* Cm2_forward_1.* k_0.* q.* (psi1.* dH1m + dH2m)+...
                             a_p_field_2_back.* Cm2_forward_2.* k_0.* q.* (psi2.* dH1m + dH2m)));
            case 'Erho'
                     component = A0.* ((-(m./r)).*...
                           (a_p_field_1_forw.* Dm2_forward_1.*  (-psi1.* H1m + H2m)+...
                            a_p_field_2_forw.* Dm2_forward_2.*  (-psi2.* H1m + H2m)+...
                           (a_p_field_1_back.* Dm2_forward_1.* (-psi1.* H1m + H2m)+...
                            a_p_field_2_back.* Dm2_forward_2.* (-psi2.* H1m + H2m)))+...
                                -1i * p.* ...
                            (a_p_field_1_forw.* Cm2_forward_1.*  k_0.* q.* (psi1.* dH1m + dH2m)+...
                             a_p_field_2_forw.* Cm2_forward_2.*  k_0.* q.* (psi2.* dH1m + dH2m)+...
                            -a_p_field_1_back.* Cm2_forward_1.* k_0.* q.* (psi1.* dH1m + dH2m)+...
                            -a_p_field_2_back.* Cm2_forward_2.* k_0.* q.* (psi2.* dH1m + dH2m)));                        
            case 'Hrho'
                    component = A0.* (((m./r)).*...
                                (a_p_field_1_forw.* Cm2_forward_1.*  (psi1.* H1m + H2m)+...
                                 a_p_field_2_forw.* Cm2_forward_2.*  (psi2.* H1m + H2m)+...
                                (a_p_field_1_back.* Cm2_forward_1.* (psi1.* H1m + H2m)+...
                                 a_p_field_2_back.* Cm2_forward_2.* (psi2.* H1m + H2m)))+...
                                 -p.* 1i.*...
                                 (a_p_field_1_forw.* Dm2_forward_1.*  k_0.* q.* (-psi1.* dH1m + dH2m)+...
                                  a_p_field_2_forw.* Dm2_forward_2.*  k_0.* q.* (-psi2.* dH1m + dH2m)+...
                                 -a_p_field_1_back.* Dm2_forward_1.* k_0.* q.* (-psi1.* dH1m + dH2m)+...
                                 -a_p_field_2_back.* Dm2_forward_2.* k_0.* q.* (-psi2.* dH1m + dH2m))); 
        end
        
    case 'Isotropic'      
        %%% вычисляем первый тип волн непрерывного спектра
       
%         %%% first type of waves
%         psi_forward_1  = psi1_q(k_0, k, a_0, EE1, MU1, EE, MU, m,   p);
%         psi_backward_1  = psi1_q(k_0, k, a_0, EE1, MU1, EE, MU, m,  -p);
%         [B_1_forward_1,B_2_forward_1,Cm2_forward_1,  Dm2_forward_1]  = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1,0,0, MU1, EE, MU, m,   p,   psi_forward_1,  1);
%         [B_1_backward_1,B_2_backward_1,Cm2_backward_1, Dm2_backward_1] = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1,0,0, MU1, EE, MU, m, (-p), psi_backward_1, 1);
% %         [B_1_back_PandM_1,B_2_back_PandM_1,Cm2_back_PandM_1, Dm2_back_PandM_1] = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, MU1, EE, MU, -m, (-p), psi_forward_1, 1);
%         
%         %%% second type of waves
%         psi_forward_2  = psi2_q(k_0, k, a_0, EE1, MU1, EE, MU, m,   p);
%         psi_backward_2  = psi2_q(k_0, k, a_0, EE1, MU1, EE, MU, m,  -p);
%         [B_1_forward_2,B_2_forward_2,Cm2_forward_2,  Dm2_forward_2]  = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1,0,0, MU1, EE, MU, m,   p,   psi_forward_2,  1);
%         [B_1_backward_2,B_2_backward_2,Cm2_backward_2, Dm2_backward_2] = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1,0,0, MU1, EE, MU, m, (-p), psi_backward_2, 1);
% %         [B_1_back_PandM_2,B_2_back_PandM_2,Cm2_back_PandM_2, Dm2_back_PandM_2] = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, MU1, EE, MU, -m, (-p), psi_forward_2, 1);
%         
%         %%%%% forward waves first type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
%         a_p_field_1_forw = a_p_field__ForBesselBeam(typeOfCylinder, q, q_0,  p, k_0, k, a_0, EE1, 0, 0, MU1, EE2, MU2, EE, MU, m, z,psi_forward_1, AE_0, AH_0);
%         %%%%% backward waves first type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
%         a_p_field_1_back = a_p_field__ForBesselBeam(typeOfCylinder, q, q_0, -p, k_0, k, a_0, EE1, 0, 0, MU1, EE2, MU2, EE, MU, m, z,psi_backward_1, AE_0, AH_0);
%                                           
%         %%%%% forward waves second type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
%         a_p_field_2_forw = a_p_field__ForBesselBeam(typeOfCylinder, q, q_0,  p, k_0, k, a_0, EE1, 0, 0, MU1, EE2, MU2, EE, MU, m, z,psi_forward_2, AE_0, AH_0);
%         %%%%% backward waves second type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
%         a_p_field_2_back = a_p_field__ForBesselBeam(typeOfCylinder, q, q_0, -p, k_0, k, a_0, EE1, 0, 0, MU1, EE2, MU2, EE, MU, m, z,psi_backward_2, AE_0, AH_0);
      
        
        if(r>=a_0)
            Q = k_0.* r * q;
%             H2m  = besselh(m, 2, Q);
%             dH2m = (H2m * m)./ Q  - besselh(m + 1, 2, Q);
%             H1m  = besselh(m, 1, Q);
%             dH1m = (H1m * m)./ Q  - besselh(m + 1, 1, Q);
            
            JmmQ  = besselj(m, Q);
            YmmQ  = bessely(m, Q);
            JMmQ  = besselj(m + 1, Q);
            YMmQ  = bessely(m + 1, Q);            
            H2m  = JmmQ - 1i * YmmQ;
            dH2m = (H2m * m)./ Q  - (JMmQ - 1i * YMmQ);
            H1m  = JmmQ + 1i * YmmQ;
            dH1m = (H1m * m)./ Q  - (JMmQ + 1i * YMmQ);
            
            A0 = 1./ (k_0 * (q.^2));
            switch(componentOfField)
                case 'Ez'
                    component = (a_p_field_1_forw.* Cm2_forward_1.*  (psi_forward_1.*  H1m + H2m)+...
                                 a_p_field_2_forw.* Cm2_forward_2.*  (psi_forward_2.*  H1m + H2m)+...
                                 a_p_field_1_back.* Cm2_backward_1.* (psi_backward_1.* H1m + H2m)+...
                                 a_p_field_2_back.* Cm2_backward_2.* (psi_backward_2.* H1m + H2m)).* q;
                case 'Hz'
                    component = (a_p_field_1_forw.* Dm2_forward_1.*  (-psi_forward_1.*  H1m + H2m)+...
                                 a_p_field_2_forw.* Dm2_forward_2.*  (-psi_forward_2.*  H1m + H2m)+...
                                 a_p_field_1_back.* Dm2_backward_1.* (-psi_backward_1.* H1m + H2m)+...
                                 a_p_field_2_back.* Dm2_backward_2.* (-psi_backward_2.* H1m + H2m)).* q;
                case 'Ephi'
                    component = A0.* ((-p.* (m./r)).*...
                                (a_p_field_1_forw.* Cm2_forward_1.*  (psi_forward_1.*  H1m + H2m)+...
                                 a_p_field_2_forw.* Cm2_forward_2.*  (psi_forward_2.*  H1m + H2m)+...
                               -(a_p_field_1_back.* Cm2_backward_1.* (psi_backward_1.* H1m + H2m)+...
                                 a_p_field_2_back.* Cm2_backward_2.* (psi_backward_2.* H1m + H2m)))+...
                                 1i *...
                                 (a_p_field_1_forw.* Dm2_forward_1.*  k_0.* q.* (-psi_forward_1.*  dH1m + dH2m)+...
                                  a_p_field_2_forw.* Dm2_forward_2.*  k_0.* q.* (-psi_forward_2.*  dH1m + dH2m)+...
                                  a_p_field_1_back.* Dm2_backward_1.* k_0.* q.* (-psi_backward_1.* dH1m + dH2m)+...
                                  a_p_field_2_back.* Dm2_backward_2.* k_0.* q.* (-psi_backward_2.* dH1m + dH2m))).* q;                    
                case 'Erho'
                     component = A0.* ((-(m./r)).*...
                           (a_p_field_1_forw.* Dm2_forward_1.*  (-psi_forward_1.*  H1m + H2m)+...
                            a_p_field_2_forw.* Dm2_forward_2.*  (-psi_forward_2.*  H1m + H2m)+...
                           (a_p_field_1_back.* Dm2_backward_1.* (-psi_backward_1.* H1m + H2m)+...
                            a_p_field_2_back.* Dm2_backward_2.* (-psi_backward_2.* H1m + H2m)))+...
                                -1i * p.* ...
                            (a_p_field_1_forw.* Cm2_forward_1.*  k_0.* q.* (psi_forward_1.*  dH1m + dH2m)+...
                             a_p_field_2_forw.* Cm2_forward_2.*  k_0.* q.* (psi_forward_2.*  dH1m + dH2m)+...
                            -a_p_field_1_back.* Cm2_backward_1.* k_0.* q.* (psi_backward_1.* dH1m + dH2m)+...
                            -a_p_field_2_back.* Cm2_backward_2.* k_0.* q.* (psi_backward_2.* dH1m + dH2m))).* q;                        
                case 'Hphi'
                     component = A0.* ((-p.* (m./r)).*...
                           (a_p_field_1_forw.* Dm2_forward_1.*  (-psi_forward_1.*  H1m + H2m)+...
                            a_p_field_2_forw.* Dm2_forward_2.*  (-psi_forward_2.*  H1m + H2m)+...
                          -(a_p_field_1_back.* Dm2_backward_1.* (-psi_backward_1.* H1m + H2m)+...
                            a_p_field_2_back.* Dm2_backward_2.* (-psi_backward_2.* H1m + H2m)))+...
                                -1i *...
                            (a_p_field_1_forw.* Cm2_forward_1.*  k_0.* q.* (psi_forward_1.*  dH1m + dH2m)+...
                             a_p_field_2_forw.* Cm2_forward_2.*  k_0.* q.* (psi_forward_2.*  dH1m + dH2m)+...
                             a_p_field_1_back.* Cm2_backward_1.* k_0.* q.* (psi_backward_1.* dH1m + dH2m)+...
                             a_p_field_2_back.* Cm2_backward_2.* k_0.* q.* (psi_backward_2.* dH1m + dH2m))).* q;
                case 'Hrho'
                    component = A0.* (((m./r)).*...
                                (a_p_field_1_forw.* Cm2_forward_1.*  (psi_forward_1.* H1m + H2m)+...
                                 a_p_field_2_forw.* Cm2_forward_2.*  (psi_forward_2.* H1m + H2m)+...
                                (a_p_field_1_back.* Cm2_backward_1.* (psi_backward_1.* H1m + H2m)+...
                                 a_p_field_2_back.* Cm2_backward_2.* (psi_backward_2.* H1m + H2m)))+...
                                 -p.* 1i.*...
                                 (a_p_field_1_forw.* Dm2_forward_1.*  k_0.* q.* (-psi_forward_1.* dH1m + dH2m)+...
                                  a_p_field_2_forw.* Dm2_forward_2.*  k_0.* q.* (-psi_forward_2.* dH1m + dH2m)+...
                                 -a_p_field_1_back.* Dm2_backward_1.* k_0.* q.* (-psi_backward_1.* dH1m + dH2m)+...
                                 -a_p_field_2_back.* Dm2_backward_2.* k_0.* q.* (-psi_backward_2.* dH1m + dH2m))).* q; 
            end            
        else
            A1 = 1./ (k_0 * (EE1 - p.^2));
            q1 = sqrt(EE1*MU1 - p.^2);
            Q1 = k_0.* r * q1;
            Jm  = besselj(m, Q1);
            dJm = (Jm * m)./ Q1  - besselj(m + 1, Q1);
            switch(componentOfField)
                case 'Ez'
                    component = (a_p_field_1_forw.* B_1_forward_1.* Jm.*  EE1+...
                                 a_p_field_2_forw.* B_1_forward_2.* Jm.*  EE1+...
                                 a_p_field_1_back.* B_1_backward_1.* Jm.* EE1+...
                                 a_p_field_2_back.* B_1_backward_2.* Jm.* EE1).* q1;
                case 'Hz'
                    component = (a_p_field_1_forw.* B_2_forward_1.*  Jm+...
                                 a_p_field_2_forw.* B_2_forward_2.*  Jm+...
                                 a_p_field_1_back.* B_2_backward_1.* Jm+...
                                 a_p_field_2_back.* B_2_backward_2.* Jm).* q1;
                case 'Ephi'
                    component = A1.* ((-p.* (m./r)).*...
                                (a_p_field_1_forw.* B_1_forward_1.*  Jm+...
                                 a_p_field_2_forw.* B_1_forward_2.*  Jm+...
                               -(a_p_field_1_back.* B_1_backward_1.* Jm+...
                                 a_p_field_2_back.* B_1_backward_2.* Jm))+...
                                 1i *...
                                 (a_p_field_1_forw.* B_2_forward_1.*  k_0.* q1.* dJm+...
                                  a_p_field_2_forw.* B_2_forward_2.*  k_0.* q1.* dJm+...
                                  a_p_field_1_back.* B_2_backward_1.* k_0.* q1.* dJm+...
                                  a_p_field_2_back.* B_2_backward_2.* k_0.* q1.* dJm)).* q1;
                case 'Erho'
                     component = A1.* ((-(m./r)).*...
                           (a_p_field_1_forw.* B_2_forward_1.* Jm+...
                            a_p_field_2_forw.* B_2_forward_2.* Jm+...
                           (a_p_field_1_back.* B_2_backward_1.* Jm+...
                            a_p_field_2_back.* B_2_backward_2.* Jm))+...
                                -1i * p.* ...
                            (a_p_field_1_forw.* B_1_forward_1.*  k_0.* q1.* dJm+...
                             a_p_field_2_forw.* B_1_forward_2.*  k_0.* q1.* dJm+...
                            -a_p_field_1_back.* B_1_backward_1.* k_0.* q1.* dJm+...
                            -a_p_field_2_back.* B_1_backward_2.* k_0.* q1.* dJm)).* q1;
                    
                case 'Hphi'
                     component = A1.* ((-p.* (m./r)).*...
                           (a_p_field_1_forw.* B_2_forward_1.* Jm+...
                            a_p_field_2_forw.* B_2_forward_2.* Jm+...
                          -(a_p_field_1_back.* B_2_backward_1.* Jm+...
                            a_p_field_2_back.* B_2_backward_2.* Jm))+...
                                -1i * EE1.* ...
                            (a_p_field_1_forw.* B_1_forward_1.*  k_0.* q1.* dJm+...
                             a_p_field_2_forw.* B_1_forward_2.*  k_0.* q1.* dJm+...
                             a_p_field_1_back.* B_1_backward_1.* k_0.* q1.* dJm+...
                             a_p_field_2_back.* B_1_backward_2.* k_0.* q1.* dJm)).* q1;
                case 'Hrho'
                    component = A1.* (((EE1 * m./r)).*...
                                (a_p_field_1_forw.* B_1_forward_1.*  Jm+...
                                 a_p_field_2_forw.* B_1_forward_2.*  Jm+...
                                (a_p_field_1_back.* B_1_backward_1.* Jm+...
                                 a_p_field_2_back.* B_1_backward_2.* Jm))+...
                                -p.* 1i.*...
                                 (a_p_field_1_forw.* B_2_forward_1.*  k_0.* q1.* dJm+...
                                  a_p_field_2_forw.* B_2_forward_2.*  k_0.* q1.* dJm+...
                                 -a_p_field_1_back.* B_2_backward_1.* k_0.* q1.* dJm+...
                                 -a_p_field_2_back.* B_2_backward_2.* k_0.* q1.* dJm)).* q1;
            end
        end

    case 'Gyrotropic'      
        %%% вычисляем первый тип волн непрерывного спектра
       
%         %%% first type of waves
%         psi_forward_1   = psi1_q__gyrotropic(k_0, k, a_0, EE1, GG1, HH1, m,   p);
%         psi_backward_1  = psi1_q__gyrotropic(k_0, k, a_0, EE1, GG1, HH1, m,  -p);
%         psi_forward_1_transp   = psi1_q__gyrotropic(k_0, k, a_0, EE1, -GG1, HH1, -m,   p);
%         psi_backward_1_transp  = psi1_q__gyrotropic(k_0, k, a_0, EE1, -GG1, HH1, -m,  -p);
% %         psi_forward_1_transp   = psi_backward_1;
% %         psi_backward_1_transp  = psi_forward_1;
%         [B_1_forward_1,B_2_forward_1,Cm2_forward_1,  Dm2_forward_1]  = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, GG1, HH1, MU1, EE, MU, m,   p,   psi_forward_1, 1);
%         [B_1_backward_1,B_2_backward_1,Cm2_backward_1, Dm2_backward_1] = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, GG1, HH1, MU1, EE, MU, m, (-p), psi_backward_1, 1);
% %         [B_1_back_PandM_1,B_2_back_PandM_1,Cm2_back_PandM_1, Dm2_back_PandM_1] = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, MU1, EE, MU, -m, (-p), psi_forward_1, 1);
%         
%         %%% second type of waves
%         psi_forward_2  = psi2_q__gyrotropic(k_0, k, a_0, EE1, GG1, HH1, m,   p);
%         psi_backward_2  = psi2_q__gyrotropic(k_0, k, a_0, EE1, GG1, HH1, m,  -p);
%         psi_forward_2_transp   = psi2_q__gyrotropic(k_0, k, a_0, EE1, -GG1, HH1, -m,   p);
%         psi_backward_2_transp  = psi2_q__gyrotropic(k_0, k, a_0, EE1, -GG1, HH1, -m,  -p);
% %         psi_forward_2_transp   = psi_backward_2;
% %         psi_backward_2_transp  = psi_forward_2;
%         [B_1_forward_2,B_2_forward_2,Cm2_forward_2,  Dm2_forward_2]  = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, GG1, HH1, MU1, EE, MU, m,   p,  psi_forward_2,  1);
%         [B_1_backward_2,B_2_backward_2,Cm2_backward_2, Dm2_backward_2] = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, GG1, HH1, MU1, EE, MU, m, (-p), psi_backward_2, 1);
% %         [B_1_back_PandM_2,B_2_back_PandM_2,Cm2_back_PandM_2, Dm2_back_PandM_2] = coefficientsOfContinuousSpectrum(typeOfCylinder,k_0, k, a_0, EE1, MU1, EE, MU, -m, (-p), psi_forward_2, 1);
%         
%         %%%%% forward waves first type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
%         a_p_field_1_forw = a_p_field__ForBesselBeam(typeOfCylinder, q, q_0,  p, k_0, k, a_0, EE1, GG1, HH1,...
%             MU1, EE2, MU2, EE, MU, m, z,psi_backward_1_transp, AE_0, AH_0);
%         %%%%% backward waves first type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
%         a_p_field_1_back = a_p_field__ForBesselBeam(typeOfCylinder, q, q_0, -p, k_0, k, a_0, EE1, GG1, HH1,...
%             MU1, EE2, MU2, EE, MU, m, z,psi_forward_1_transp, AE_0, AH_0);
%                                           
%         %%%%% forward waves second type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
%         a_p_field_2_forw = a_p_field__ForBesselBeam(typeOfCylinder, q, q_0,  p, k_0, k, a_0, EE1, GG1, HH1,...
%             MU1, EE2, MU2, EE, MU, m, z, psi_backward_2_transp, AE_0, AH_0);
%         %%%%% backward waves second type of waves %%%%%%%%%%%%%%%%%%%%%%%%%%%
%         a_p_field_2_back = a_p_field__ForBesselBeam(typeOfCylinder, q, q_0, -p, k_0, k, a_0, EE1, GG1, HH1,...
%             MU1, EE2, MU2, EE, MU, m, z, psi_forward_2_transp, AE_0, AH_0);
      
        
        if(r>=a_0)
            Q = k_0.* r * q;
%             H2m  = besselh(m, 2, Q);
%             dH2m = (H2m * m)./ Q  - besselh(m + 1, 2, Q);
%             H1m  = besselh(m, 1, Q);
%             dH1m = (H1m * m)./ Q  - besselh(m + 1, 1, Q);
            
            JmmQ  = besselj(m, Q);
            YmmQ  = bessely(m, Q);
            JMmQ  = besselj(m + 1, Q);
            YMmQ  = bessely(m + 1, Q);            
            H2m  = JmmQ - 1i * YmmQ;
            dH2m = (H2m * m)./ Q  - (JMmQ - 1i * YMmQ);
            H1m  = JmmQ + 1i * YmmQ;
            dH1m = (H1m * m)./ Q  - (JMmQ + 1i * YMmQ);
            A0 = 1./ (k_0 * (q.^2));
            switch(componentOfField)
                case 'Ez'
                    component = (a_p_field_1_forw.* Cm2_forward_1.*  q.* (psi_forward_1.*  H1m + H2m)+...
                                 a_p_field_2_forw.* Cm2_forward_2.*  q.* (psi_forward_2.*  H1m + H2m)+...
                                 a_p_field_1_back.* Cm2_backward_1.* q.* (psi_backward_1.* H1m + H2m)+...
                                 a_p_field_2_back.* Cm2_backward_2.* q.* (psi_backward_2.* H1m + H2m));
                case 'Hz'
                    component = (a_p_field_1_forw.* Dm2_forward_1.*  q.* (-psi_forward_1.*  H1m + H2m)+...
                                 a_p_field_2_forw.* Dm2_forward_2.*  q.* (-psi_forward_2.*  H1m + H2m)+...
                                 a_p_field_1_back.* Dm2_backward_1.* q.* (-psi_backward_1.* H1m + H2m)+...
                                 a_p_field_2_back.* Dm2_backward_2.* q.* (-psi_backward_2.* H1m + H2m));
                case 'Ephi'
                    component = A0.* q.* ((-p.* (m./r)).*...
                                (a_p_field_1_forw.* Cm2_forward_1.*  (psi_forward_1.*  H1m + H2m)+...
                                 a_p_field_2_forw.* Cm2_forward_2.*  (psi_forward_2.*  H1m + H2m)+...
                               -(a_p_field_1_back.* Cm2_backward_1.* (psi_backward_1.* H1m + H2m)+...
                                 a_p_field_2_back.* Cm2_backward_2.* (psi_backward_2.* H1m + H2m)))+...
                                 1i *...
                                 (a_p_field_1_forw.* Dm2_forward_1.*  k_0.* q.* (-psi_forward_1.*  dH1m + dH2m)+...
                                  a_p_field_2_forw.* Dm2_forward_2.*  k_0.* q.* (-psi_forward_2.*  dH1m + dH2m)+...
                                  a_p_field_1_back.* Dm2_backward_1.* k_0.* q.* (-psi_backward_1.* dH1m + dH2m)+...
                                  a_p_field_2_back.* Dm2_backward_2.* k_0.* q.* (-psi_backward_2.* dH1m + dH2m)));                    
                case 'Erho'
                     component = A0.* q.* ((-(m./r)).*...
                           (a_p_field_1_forw.* Dm2_forward_1.*  (-psi_forward_1.*  H1m + H2m)+...
                            a_p_field_2_forw.* Dm2_forward_2.*  (-psi_forward_2.*  H1m + H2m)+...
                           (a_p_field_1_back.* Dm2_backward_1.* (-psi_backward_1.* H1m + H2m)+...
                            a_p_field_2_back.* Dm2_backward_2.* (-psi_backward_2.* H1m + H2m)))+...
                                -1i * p.* ...
                            (a_p_field_1_forw.* Cm2_forward_1.*  k_0.* q.* (psi_forward_1.*  dH1m + dH2m)+...
                             a_p_field_2_forw.* Cm2_forward_2.*  k_0.* q.* (psi_forward_2.*  dH1m + dH2m)+...
                            -a_p_field_1_back.* Cm2_backward_1.* k_0.* q.* (psi_backward_1.* dH1m + dH2m)+...
                            -a_p_field_2_back.* Cm2_backward_2.* k_0.* q.* (psi_backward_2.* dH1m + dH2m)));                        
                case 'Hphi'
                     component = A0.* q.* ((-p.* (m./r)).*...
                           (a_p_field_1_forw.* Dm2_forward_1.*  (-psi_forward_1.*  H1m + H2m)+...
                            a_p_field_2_forw.* Dm2_forward_2.*  (-psi_forward_2.*  H1m + H2m)+...
                          -(a_p_field_1_back.* Dm2_backward_1.* (-psi_backward_1.* H1m + H2m)+...
                            a_p_field_2_back.* Dm2_backward_2.* (-psi_backward_2.* H1m + H2m)))+...
                                -1i *...
                            (a_p_field_1_forw.* Cm2_forward_1.*  k_0.* q.* (psi_forward_1.*  dH1m + dH2m)+...
                             a_p_field_2_forw.* Cm2_forward_2.*  k_0.* q.* (psi_forward_2.*  dH1m + dH2m)+...
                             a_p_field_1_back.* Cm2_backward_1.* k_0.* q.* (psi_backward_1.* dH1m + dH2m)+...
                             a_p_field_2_back.* Cm2_backward_2.* k_0.* q.* (psi_backward_2.* dH1m + dH2m)));
                case 'Hrho'
                    component = A0.* q.* (((m./r)).*...
                                (a_p_field_1_forw.* Cm2_forward_1.*  (psi_forward_1.* H1m + H2m)+...
                                 a_p_field_2_forw.* Cm2_forward_2.*  (psi_forward_2.* H1m + H2m)+...
                                (a_p_field_1_back.* Cm2_backward_1.* (psi_backward_1.* H1m + H2m)+...
                                 a_p_field_2_back.* Cm2_backward_2.* (psi_backward_2.* H1m + H2m)))+...
                                 -p.* 1i.*...
                                 (a_p_field_1_forw.* Dm2_forward_1.*  k_0.* q.* (-psi_forward_1.* dH1m + dH2m)+...
                                  a_p_field_2_forw.* Dm2_forward_2.*  k_0.* q.* (-psi_forward_2.* dH1m + dH2m)+...
                                 -a_p_field_1_back.* Dm2_backward_1.* k_0.* q.* (-psi_backward_1.* dH1m + dH2m)+...
                                 -a_p_field_2_back.* Dm2_backward_2.* k_0.* q.* (-psi_backward_2.* dH1m + dH2m))); 
            end            
        else
%             A1 = 1./ (k_0 * (EE1 - p.^2));
%             q1 = sqrt(EE1*MU1 - p.^2);
%             Q1 = k_0.* r * q1;
%             Jm  = besselj(m, Q1);
%             dJm = (Jm * m)./ Q1  - besselj(m + 1, Q1);
            
            [q1, q2, n1,      n2,      alp1,      alp2,      bet1,      bet2] = term_of_gyrotropic_waveguide(EE1, GG1, HH1, p);
            [q1, q2, n1_back, n2_back, alp1_back, alp2_back, bet1_back, bet2_back] = term_of_gyrotropic_waveguide(EE1, GG1, HH1,-p);
            
            Q1 = (q1.* r).* k_0;
            Q2 = (q2.* r).* k_0;  
            
            JM1    = besselj(m+1, Q1);
            JM2    = besselj(m+1, Q2);
            Jm1    = besselj(m, Q1);
            Jm2    = besselj(m, Q2);
            %%%% vary larger JM1 and Jm1
            JM1(abs(imag(Q1))>300) = besselj(m+1, 1i*300);
            Jm1(abs(imag(Q1))>300) = besselj(m, 1i*300);
%             %%%% vary larger JM2 and Jm2
%             JM2(abs(imag(Q2))>300) = besselj(m+1, 1i*300);
%             Jm2(abs(imag(Q2))>300) = besselj(m,   1i*300);
            
            Jm1_Q1 = Jm1./ Q1;
            Jm2_Q2 = Jm2./ Q2;
            
            Ez_q1   = (((1i./HH1).* n1).* q1).* Jm1;
            Ez_q2   = (((1i./HH1).* n2).* q2).* Jm2;
            Hz_q1   = - q1.* Jm1;
            Hz_q2   = - q2.* Jm2;            
            dEz_q1   = (((1i./HH1).* n1).* q1).* (m.* Jm1_Q1 - JM1).* q1.* k_0;
            dEz_q2   = (((1i./HH1).* n2).* q2).* (m.* Jm2_Q2 - JM2).* q2.* k_0;
            dHz_q1   = - q1.* (m.* Jm1_Q1 - JM1).* q1.* k_0;
            dHz_q2   = - q2.* (m.* Jm2_Q2 - JM2).* q2.* k_0;
            A_1 = 1./ (k_0 * (GG1^2 - (p.^2 - EE1).^2));
            switch(componentOfField)
                case 'Ez'
                    component =(a_p_field_1_forw.* (B_1_forward_1.*  (((1i./HH1).* n1).* q1).* Jm1 +...
                                                    B_2_forward_1.*  (((1i./HH1).* n2).* q2).* Jm2)+...
                                a_p_field_2_forw.* (B_1_forward_2.*  (((1i./HH1).* n1).* q1).* Jm1 +...
                                                    B_2_forward_2.*  (((1i./HH1).* n2).* q2).* Jm2)+...
                                a_p_field_1_back.* (B_1_backward_1.*  (((1i./HH1).* n1_back).* q1).* Jm1 +...
                                                    B_2_backward_1.*  (((1i./HH1).* n2_back).* q2).* Jm2)+...
                                a_p_field_2_back.* (B_1_backward_2.*  (((1i./HH1).* n1_back).* q1).* Jm1 +...
                                                    B_2_backward_2.*  (((1i./HH1).* n2_back).* q2).* Jm2)) * HH1;
                case 'Hz'
                    component = (a_p_field_1_forw.* (B_1_forward_1.*  (- q1.* Jm1)+...
                                                     B_2_forward_1.*  (- q2.* Jm2))+...
                                 a_p_field_2_forw.* (B_1_forward_2.*  (- q1.* Jm1)+...
                                                     B_2_forward_2.*  (- q2.* Jm2))+...
                                 a_p_field_1_back.* (B_1_backward_1.*  (- q1.* Jm1)+...
                                                     B_2_backward_1.*  (- q2.* Jm2))+...
                                 a_p_field_2_back.* (B_1_backward_2.*  (- q1.* Jm1)+...
                                                     B_2_backward_2.*  (- q2.* Jm2)));
                             
                case 'Ephi'
                    component = 1i.*...
                                (a_p_field_1_forw.* (B_1_forward_1.* (JM1 + (alp1.* m).* Jm1_Q1)+...
                                                     B_2_forward_1.* (JM2 + (alp2.* m).* Jm2_Q2))+...
                                 a_p_field_2_forw.* (B_1_forward_2.* (JM1 + (alp1.* m).* Jm1_Q1)+...
                                                     B_2_forward_2.* (JM2 + (alp2.* m).* Jm2_Q2))+...
                                 a_p_field_1_back.* (B_1_backward_1.* (JM1 + (alp1_back.* m).* Jm1_Q1)+...
                                                     B_2_backward_1.* (JM2 + (alp2_back.* m).* Jm2_Q2))+...
                                 a_p_field_2_back.* (B_1_backward_2.* (JM1 + (alp1_back.* m).* Jm1_Q1)+...
                                                     B_2_backward_2.* (JM2 + (alp2_back.* m).* Jm2_Q2)));
%                     component = A_1.*...
%                                 (a_p_field_1_forw.*...
%                                 (p.*(EE1-p.^2).*m./r.* (B_1_forward_1.* Ez_q1+ B_2_forward_1.* Ez_q2)+...
%                                  p.*GG1.* (B_1_forward_1.* dEz_q1+ B_2_forward_1.* dEz_q2)+...
%                                  -1i*GG1.*m./r.* (B_1_forward_1.* Hz_q1+ B_2_forward_1.* Hz_q2)+...
%                                  -1i.*(EE1-p.^2).* (B_1_forward_1.* dHz_q1+ B_2_forward_1.* dHz_q2))+...
%                                  a_p_field_2_forw.*...
%                                 (p.*(EE1-p.^2).*m./r.* (B_1_forward_2.* Ez_q1+ B_2_forward_2.* Ez_q2)+...
%                                  p.*GG1.* (B_1_forward_2.* dEz_q1+ B_2_forward_2.* dEz_q2)+...
%                                  -1i*GG1.*m./r.* (B_1_forward_2.* Hz_q1+ B_2_forward_2.* Hz_q2)+...
%                                  -1i.*(EE1-p.^2).* (B_1_forward_2.* dHz_q1+ B_2_forward_2.* dHz_q2))+...
%                                  a_p_field_1_back.*...
%                                 (p.*(EE1-p.^2).*m./r.* (B_1_backward_1.* Ez_q1+ B_2_backward_1.* Ez_q2)+...
%                                  p.*GG1.* (B_1_backward_1.* dEz_q1+ B_2_backward_1.* dEz_q2)+...
%                                  -1i*GG1.*m./r.* (B_1_backward_1.* Hz_q1+ B_2_backward_1.* Hz_q2)+...
%                                  -1i.*(EE1-p.^2).* (B_1_backward_1.* dHz_q1+ B_2_backward_1.* dHz_q2))+...
%                                  a_p_field_2_back.*...
%                                 (p.*(EE1-p.^2).*m./r.* (B_1_backward_2.* Ez_q1+ B_2_backward_2.* Ez_q2)+...
%                                  p.*GG1.* (B_1_backward_2.* dEz_q1+ B_2_backward_2.* dEz_q2)+...
%                                  -1i*GG1.*m./r.* (B_1_backward_2.* Hz_q1+ B_2_backward_2.* Hz_q2)+...
%                                  -1i.*(EE1-p.^2).* (B_1_backward_2.* dHz_q1+ B_2_backward_2.* dHz_q2)));

%                     component = 1i.*a_p_field_1_back.* (B_1_backward_1.* (JM1 + (alp1_back.* m).* Jm1_Q1)+...
%                                                      B_2_backward_1.* (JM2 + (alp2_back.* m).* Jm2_Q2));
%                     component = A_1.*...
%                                 a_p_field_1_back.*...
%                                 (p.*(EE1-p.^2).*m./r.* (B_1_backward_1.* Ez_q1+ B_2_backward_1.* Ez_q2)+...
%                                  p.*GG1.* (B_1_backward_1.* dEz_q1+ B_2_backward_1.* dEz_q2)+...
%                                  -1i*GG1.*m./r.* (B_1_backward_1.* Hz_q1+ B_2_backward_1.* Hz_q2)+...
%                                  -1i.*(EE1-p.^2).* (B_1_backward_1.* dHz_q1+ B_2_backward_1.* dHz_q2));
                                                 


                case 'Erho'
                     component = a_p_field_1_forw.* (-B_1_forward_1.* ((n1.*p + GG1)./EE1.* JM1 + (alp1.* m).* Jm1_Q1)+...
                                                     -B_2_forward_1.* ((n2.*p + GG1)./EE1.* JM2 + (alp2.* m).* Jm2_Q2))+...
                                 a_p_field_2_forw.* (-B_1_forward_2.* ((n1.*p + GG1)./EE1.* JM1 + (alp1.* m).* Jm1_Q1)+...
                                                     -B_2_forward_2.* ((n2.*p + GG1)./EE1.* JM2 + (alp2.* m).* Jm2_Q2))+...
                                 a_p_field_1_back.* (-B_1_backward_1.* ((n1_back.*(-p) + GG1)./EE1.* JM1 + (alp1_back.* m).* Jm1_Q1)+...
                                                     -B_2_backward_1.* ((n2_back.*(-p) + GG1)./EE1.* JM2 + (alp2_back.* m).* Jm2_Q2))+...
                                 a_p_field_2_back.* (-B_1_backward_2.* ((n1_back.*(-p) + GG1)./EE1.* JM1 + (alp1_back.* m).* Jm1_Q1)+...
                                                     -B_2_backward_2.* ((n2_back.*(-p) + GG1)./EE1.* JM2 + (alp2_back.* m).* Jm2_Q2));
                    
                case 'Hphi'
                     component = (a_p_field_1_forw.* (-B_1_forward_1.* n1.* (JM1 - (bet1.* m).* Jm1_Q1)+...
                                                      -B_2_forward_1.* n2.* (JM2 - (bet2.* m).* Jm2_Q2))+...
                                 a_p_field_2_forw.* (-B_1_forward_2.* n1.* (JM1 - (bet1.* m).* Jm1_Q1)+...
                                                     -B_2_forward_2.* n2.* (JM2 - (bet2.* m).* Jm2_Q2))+...
                                 a_p_field_1_back.* (-B_1_backward_1.* n1_back.* (JM1 - (bet1_back.* m).* Jm1_Q1)+...
                                                     -B_2_backward_1.* n2_back.* (JM2 - (bet2_back.* m).* Jm2_Q2))+...
                                 a_p_field_2_back.* (-B_1_backward_2.* n1_back.* (JM1 - (bet1_back.* m).* Jm1_Q1)+...
                                                     -B_2_backward_2.* n2_back.* (JM2 - (bet2_back.* m).* Jm2_Q2)));
                                         
                case 'Hrho'
                    component = -1i *...
                                (a_p_field_1_forw.* (B_1_forward_1.* (p.* JM1 - (n1.* bet1.* m).* Jm1_Q1)+...
                                                     B_2_forward_1.* (p.* JM2 - (n2.* bet2.* m).* Jm2_Q2))+...
                                 a_p_field_2_forw.* (B_1_forward_2.* (p.* JM1 - (n1.* bet1.* m).* Jm1_Q1)+...
                                                     B_2_forward_2.* (p.* JM2 - (n2.* bet2.* m).* Jm2_Q2))+...
                                 a_p_field_1_back.* (B_1_backward_1.* ((-p).* JM1 - (n1_back.* bet1_back.* m).* Jm1_Q1)+...
                                                     B_2_backward_1.* ((-p).* JM2 - (n2_back.* bet2_back.* m).* Jm2_Q2))+...
                                 a_p_field_2_back.* (B_1_backward_2.* ((-p).* JM1 - (n1_back.* bet1_back.* m).* Jm1_Q1)+...
                                                     B_2_backward_2.* ((-p).* JM2 - (n2_back.* bet2_back.* m).* Jm2_Q2)));
            end
        end

% %%% second type of waves
% psi_forward  = psi2_q(k_0, k, a_0, EE1, MU1, EE, MU, m,   p);  
% psi_backward = psi2_q(k_0, k, a_0, EE1, MU1, EE, MU, m, (-p));
% [B_1_forward,B_2_forward,Cm2_forward,  Dm2_forward]  = coefficientsOfContinuousSpectrum(k_0, k, a_0, EE1, MU1, EE, MU, m,   p,   psi_forward,  1);
% [B_1_backward,B_2_backward,Cm2_backward, Dm2_backward] = coefficientsOfContinuousSpectrum(k_0, k, a_0, EE1, MU1, EE, MU, m, (-p), psi_backward, 1);
% 
% if(r>=a_0)
%     H1m  = besselh(m, 1, k_0*q*r);
%     H2m  = besselh(m, 2, k_0*q*r);
%     dH1m = (H1m * m)./ (k_0*q*r)  - besselh(m + 1, 1, k_0*q*r);
%     dH2m = (H2m * m)./ (k_0*q*r)  - besselh(m + 1, 2, k_0*q*r);
%     
%     A = 1./ (k_0 * (q.^2));
%     Hphi1_E =  A.* (- 1i * k_0 * q.* dH1m);
%     Hphi2_E =  A.* (- 1i * k_0 * q.* dH2m);
%     Hphi1_H =  A.* (- (p * m./r).* H1m);
%     Hphi2_H =  A.* (- (p * m./r).* H2m);
%    
%     Hphi = Hphi + a_p_field_2__ForBesselBeam(q, q_0, p, k_0, k, a_0, EE1, MU1, EE2, MU2, EE, MU, m, z, AE_0, AH_0).*...
%         (Cm2_forward.*  ( psi_forward.*  Hphi1_E + Hphi2_E)+...
%          Dm2_forward.*  (-psi_forward.*  Hphi1_H + Hphi2_H)).* exp(-1i*p*z);
% 
%     Hphi1_H =  A.* (- ((-p) * m./r).* H1m);
%     Hphi2_H =  A.* (- ((-p) * m./r).* H2m);
%     Hphi = Hphi + a_p_field_2__ForBesselBeam(q, q_0,(-p), k_0, k, a_0, EE1, MU1, EE2, MU2, EE, MU, m, z, AE_0, AH_0).*...
%         (Cm2_backward.*  ( psi_backward.*  Hphi1_E + Hphi2_E)+...
%          Dm2_backward.*  (-psi_backward.*  Hphi1_H + Hphi2_H)).* exp(-1i*(-p)*z);
% 
% else
%     q1 = sqrt(EE1*MU1/(EE*MU) -  p.^2);
%     A_1 = 1./ (k_0 * (EE1*MU1 - EE*MU * p.^2));
%     Hphi = Hphi + a_p_field_2__ForBesselBeam(q, q_0, p, k_0, k, a_0, EE1, MU1, EE2, MU2, EE, MU, m, z, AE_0, AH_0).*...
%         (B_1_forward.*  A_1.* (- 1i * k_0 * EE1 * q1.* ((besselj(m, k_0*q1*r) * m)./ (k_0*q1*r)  - besselj(m + 1, k_0*q1*r)))+...
%          B_2_forward.*  A_1.* (- (p * m./r).* besselj(m, k_0*q1*r))).* exp(-1i*p*z);
%      
%     Hphi = Hphi + a_p_field_2__ForBesselBeam(q, q_0,(-p), k_0, k, a_0, EE1, MU1, EE2, MU2, EE, MU, m, z, AE_0, AH_0).*...
%         (B_1_backward.*  A_1.* (- 1i * k_0 * EE1 * q1.* ((besselj(m, k_0*q1*r) * m)./ (k_0*q1*r)  - besselj(m + 1, k_0*q1*r)))+...
%          B_2_backward.*  A_1.* (- ((-p) * m./r).* besselj(m, k_0*q1*r))).* exp(-1i*(-p)*z);
% end

end

% component = component.* (exp(1i * k_0 * p * z));  %%%% we consider back waves
% component = component.* (exp(-1i * k_0 * p * z));  %%%% we consider back waves


