%%%%% расчёт коэффициента для волн непрерывного спектра в прямом
%%%%% направлении (в сторону среды 2)
%%%%% второе приближение в нахождении коэффициента aplus
function component = field__ForBeamDiffraction_InFreeSpace_discreteRepr(componentOfField, typeOfCylinder, r, z, q, p, k_0,  m,...
          a_p_Ebeam_forw, a_p_Hbeam_forw)

switch(typeOfCylinder)
     case 'PerfectConductivity'      
        %%% вычисляем первый тип волн непрерывного спектра
        
        A0 = 1./ (k_0 * (q.^2));
        Jm  = besselj(m, k_0 * q * r);
        dJm = (Jm * m)./ (k_0 * q * r)  - besselj(m + 1, k_0 * q * r);
        switch(componentOfField)
            case 'Ez'
                component = (a_p_Ebeam_forw).* q.* Jm;
            case 'Hz'
                component = (a_p_Hbeam_forw).* q.* Jm;
            case 'Ephi'
                component = (A0.* ((-p.* (m./r)).*...
                    ((a_p_Ebeam_forw).* q.* Jm)+...
                    1i *...
                    ((a_p_Hbeam_forw).* k_0.* q.* q.* dJm)));
            case 'Erho'
                component = (A0.* ((-(m./r)).*...
                    ((a_p_Hbeam_forw).* q.* Jm)+...
                    -1i * p.* ...
                    ((a_p_Ebeam_forw).* k_0.* q.* q.* dJm)));
            case 'Hphi'
                component = (A0.* ((-p.* (m./r)).*...
                    ((a_p_Hbeam_forw).* q.* Jm)+...
                    -1i *...
                    ((a_p_Ebeam_forw ).* k_0.* q.* q.* dJm)));
            case 'Hrho'
                component = (A0.* (((m./r)).*...
                    ((a_p_Ebeam_forw).* q.* Jm)+...
                    -1i * p.* ...
                    ((a_p_Hbeam_forw).* k_0.* q.* q.* dJm)));
         end
        
    case 'Isotropic'      
        %%% вычисляем первый тип волн непрерывного спектра
        
        A0 = 1./ (k_0 * (q.^2));
        Jm  = besselj(m, k_0 * q * r);
        dJm = (Jm * m)./ (k_0 * q * r)  - besselj(m + 1, k_0 * q * r);
        switch(componentOfField)
            case 'Ez'
                component = (a_p_Ebeam_forw).* q.* Jm;
            case 'Hz'
                component = (a_p_Hbeam_forw).* q.* Jm;
            case 'Ephi'
                component = (A0.* ((-p.* (m./r)).*...
                    ((a_p_Ebeam_forw).* q.* Jm)+...
                    1i *...
                    ((a_p_Hbeam_forw).* k_0.* q.* q.* dJm)));
            case 'Erho'
                component = (A0.* ((-(m./r)).*...
                    ((a_p_Hbeam_forw).* q.* Jm)+...
                    -1i * p.* ...
                    ((a_p_Ebeam_forw).* k_0.* q.* q.* dJm)));
            case 'Hphi'
                component = (A0.* ((-p.* (m./r)).*...
                    ((a_p_Hbeam_forw).* q.* Jm)+...
                    -1i *...
                    ((a_p_Ebeam_forw ).* k_0.* q.* q.* dJm)));
            case 'Hrho'
                component = (A0.* (((m./r)).*...
                    ((a_p_Ebeam_forw).* q.* Jm)+...
                    -1i * p.* ...
                    ((a_p_Hbeam_forw).* k_0.* q.* q.* dJm)));
        end

    case 'Gyrotropic'      
        %%% вычисляем первый тип волн непрерывного спектра
        
        A0 = 1./ (k_0 * (q.^2));
        Jm  = besselj(m, k_0 * q * r);
        dJm = (Jm * m)./ (k_0 * q * r)  - besselj(m + 1, k_0 * q * r);
        switch(componentOfField)
            case 'Ez'
                component = (a_p_Ebeam_forw).* q.* Jm;
            case 'Hz'
                component = (a_p_Hbeam_forw).* q.* Jm;
            case 'Ephi'
                component = (A0.* ((-p.* (m./r)).*...
                    ((a_p_Ebeam_forw).* q.* Jm)+...
                    1i *...
                    ((a_p_Hbeam_forw).* k_0.* q.* q.* dJm)));
            case 'Erho'
                component = (A0.* ((-(m./r)).*...
                    ((a_p_Hbeam_forw).* q.* Jm)+...
                    -1i * p.* ...
                    ((a_p_Ebeam_forw).* k_0.* q.* q.* dJm)));
            case 'Hphi'
                component = (A0.* ((-p.* (m./r)).*...
                    ((a_p_Hbeam_forw).* q.* Jm)+...
                    -1i *...
                    ((a_p_Ebeam_forw ).* k_0.* q.* q.* dJm)));
            case 'Hrho'
                component = (A0.* (((m./r)).*...
                    ((a_p_Ebeam_forw).* q.* Jm)+...
                    -1i * p.* ...
                    ((a_p_Hbeam_forw).* k_0.* q.* q.* dJm)));
        end
end

component = component.* exp(-1i * k_0 * p * z);
