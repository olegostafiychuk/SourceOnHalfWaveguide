%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Illustrator
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 2 410 380 565
%%HiResBoundingBox: 2 410 380 565
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2004 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
q
[1 0 0 -1 0 0] cm
/DeviceRGB {} cs
[0.0823 0.0078 0.4823] sc
0 i
false op
false OP
192.8335 -541.3364 m
194.5845 -540.7017 328.7974 -492.0142 341.5435 -487.3892 c
328.8374 -482.6538 194.7905 -432.689 192.9995 -432.022 c
191.2036 -432.6753 53.8511 -482.648 40.8101 -487.3931 c
53.8853 -492.0317 191.0791 -540.7134 192.8335 -541.3364 c
h
191.9243 -546.8501 m
191.9243 -546.8501 24.5454 -487.4575 24.5454 -487.4575 c
24.5454 -487.4575 193.023 -426.1606 193.023 -426.1606 c
193.023 -426.1606 357.479 -487.4595 357.479 -487.4595 c
357.479 -487.4595 192.855 -547.1802 192.855 -547.1802 c
192.855 -547.1802 191.9243 -546.8501 191.9243 -546.8501 c
h
f
140.5112 -463.3833 m
140.5112 -461.312 138.8325 -459.6333 136.7612 -459.6333 c
134.6899 -459.6333 133.0112 -461.312 133.0112 -463.3833 c
133.0112 -465.4546 134.6899 -467.1333 136.7612 -467.1333 c
138.8325 -467.1333 140.5112 -465.4546 140.5112 -463.3833 c
h
f
210.2612 -449.2583 m
210.2612 -447.187 208.5825 -445.5083 206.5112 -445.5083 c
204.4399 -445.5083 202.7612 -447.187 202.7612 -449.2583 c
202.7612 -451.3296 204.4399 -453.0083 206.5112 -453.0083 c
208.5825 -453.0083 210.2612 -451.3296 210.2612 -449.2583 c
h
f
264.1362 -469.5083 m
264.1362 -467.437 262.4575 -465.7583 260.3862 -465.7583 c
258.3149 -465.7583 256.6362 -467.437 256.6362 -469.5083 c
256.6362 -471.5796 258.3149 -473.2583 260.3862 -473.2583 c
262.4575 -473.2583 264.1362 -471.5796 264.1362 -469.5083 c
h
f
288.3862 -478.6333 m
288.3862 -476.562 286.7075 -474.8833 284.6362 -474.8833 c
282.5649 -474.8833 280.8862 -476.562 280.8862 -478.6333 c
280.8862 -480.7046 282.5649 -482.3833 284.6362 -482.3833 c
286.7075 -482.3833 288.3862 -480.7046 288.3862 -478.6333 c
h
f
100.3027 -501.5493 m
100.3027 -501.5493 108.6782 -504.4663 108.6782 -504.4663 c
108.6782 -504.4663 108.6909 -483.2993 108.6909 -483.2661 c
108.6909 -480.3423 112.397 -475.2583 118.8862 -475.2583 c
124.7197 -475.2583 125.5112 -477.8833 125.5112 -479.3833 c
125.5112 -479.3833 125.5112 -510.4663 125.5112 -510.4663 c
125.5112 -510.4663 133.8862 -513.4243 133.8862 -513.4243 c
133.8862 -513.4243 133.8862 -477.7583 133.8862 -477.7583 c
133.8862 -477.7583 134.1362 -467.3833 120.2612 -467.3833 c
106.3862 -467.3833 100.3027 -475.3413 100.3027 -479.3833 c
100.3027 -479.3833 100.3027 -501.5493 100.3027 -501.5493 c
h
f
153.0112 -453.8413 m
153.0112 -453.8413 153.0112 -519.6753 153.0112 -519.6753 c
153.0112 -519.6753 199.5112 -541.8833 199.5112 -514.2583 c
199.5112 -494.7583 166.7612 -483.7583 161.5112 -482.3833 c
161.5112 -482.3833 161.5112 -450.7583 161.5112 -450.7583 c
161.5112 -450.7583 153.0112 -453.8413 153.0112 -453.8413 c
h
f
/DeviceRGB {} cs
[1 1 1] sc
161.3862 -490.2583 m
161.3862 -490.2583 161.3862 -514.5083 161.3862 -514.5083 c
161.3862 -514.5083 190.7612 -526.1333 190.7612 -514.1333 c
190.7612 -501.5083 168.6362 -493.3833 161.3862 -490.2583 c
h
f
/DeviceRGB {} cs
[0.0823 0.0078 0.4823] sc
168.0112 -486.0083 m
168.0112 -486.0083 193.1362 -440.3833 193.1362 -440.3833 c
193.1362 -440.3833 201.1362 -443.6333 201.1362 -443.6333 c
201.1362 -443.6333 175.3862 -490.0083 175.3862 -490.0083 c
175.3862 -490.0083 168.0112 -486.0083 168.0112 -486.0083 c
h
f
215.6519 -448.7739 m
226.6782 -452.6753 254.4282 -458.8413 254.3862 -473.8833 c
254.3364 -491.8833 219.1782 -502.1333 219.1782 -510.2583 c
219.1782 -520.0923 240.8032 -509.0493 249.9282 -504.9243 c
249.9282 -504.9243 250.0112 -513.1333 250.0112 -513.1333 c
250.0112 -513.1333 210.7612 -534.3833 210.7612 -511.1333 c
210.7612 -494.0083 245.3862 -489.5083 245.3862 -473.0083 c
245.3862 -464.3833 219.0112 -458.2583 213.3862 -456.1333 c
213.3862 -456.1333 215.6362 -448.7681 215.6519 -448.7739 c
h
f
268.7612 -507.0923 m
268.7612 -507.0923 277.4487 -504.1333 277.4487 -504.1333 c
277.4487 -504.1333 277.5112 -471.9253 277.5112 -471.9253 c
277.5112 -471.9253 268.8442 -468.7583 268.8442 -468.7583 c
268.8442 -468.7583 268.7612 -507.0923 268.7612 -507.0923 c
h
f
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
